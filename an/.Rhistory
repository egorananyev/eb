cur_cue_cond = cue_conds[1]
cur_cue_cond
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
cur_subj = subjs[1]  # temp
cur_subj
cur_subj_dir = paste0(data_dir, cur_subj)
cur_cond = conds[1]  # temp
cur_cond
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
cur_sess = sesss[1]  # temp
cur_sess
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
# print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
!'cue_pred' %in% colnames(cur_ds)
cur_ds$cue_pred = cur_cue_bin
cur_ds
head(cur_ds)
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
et = rbind(et, cur_et)
head(et)
options(width=90)
head(et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
file.exists(excl_file)
excl_file_ds = read.csv(excl_file)
excl_file_ds
nrow(excl_file_ds) > 0
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
colnames(et)
colnames(cur_et)
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
print(colnames(et))
print(colnames(cur_et))
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
!cur_cond == 'a'
head(cur_et)
colnames(cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et$shutter_sample_beg = NA
cur_et$shutter_time_beg = NA
cur_et$shutter_sample_end = NA
cur_et$shutter_time_end = NA
cur_et$cue_resp_sample = NA
cur_et$cue_resp_time = NA
}
colnames(cur_et)
head(cur_et)
ncol(cur_et)
colnames(cur_et)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
# cur_et$shutter_sample_beg = NA
# cur_et$shutter_time_beg = NA
# cur_et$shutter_sample_end = NA
# cur_et$shutter_time_end = NA
# cur_et$cue_resp_sample = NA
# cur_et$cue_resp_time = NA
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
print(colnames(et))
print(colnames(cur_et))
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
head(cur_et)
