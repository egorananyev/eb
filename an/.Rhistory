}
colnames(cur_et)
head(cur_et)
ncol(cur_et)
colnames(cur_et)
options(width=100)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
debug = F
short_rt_cutoff = 0.2
long_rt_cutoff = 1
library(plyr)
library(ggplot2)
if(computer == 'shocky'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
all_data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1/')
conds = c('cond-a', 'cond-c', 'cond-v')
cue_conds = c('cp', 'cu')  # cue predictive and unpredictive
ds = data.frame()
et = data.frame()
excl = data.frame()
# cur_cue_cond = cue_conds[1]
for(cur_cue_cond in cue_conds){
cur_cue_bin = as.numeric(cur_cue_cond == 'cp')  # binary variable for whether the cue is pred've
data_dir = paste0(all_data_dir, cur_cue_cond, '/')
subjs = dir(data_dir, pattern='subj-')
# cur_subj = subjs[1]  # temp
for(cur_subj in subjs){
cur_subj_dir = paste0(data_dir, cur_subj)
# cur_cond = conds[1]  # temp
for(cur_cond in conds){
cur_cond_dir = paste(cur_subj_dir, cur_cond, sep='/')
sesss = dir(cur_cond_dir, pattern='sess-')
# cur_sess = sesss[1]  # temp
for(cur_sess in sesss){
cur_sess_dir = paste(cur_cond_dir, cur_sess, sep='/')
print(cur_sess_dir)
cur_ds = read.csv(paste(cur_sess_dir, 'beh_out.csv', sep='/'))
# Making sure 'cue_pred' column exists; if not, writing it in:
if(!'cue_pred' %in% colnames(cur_ds)){
cur_ds$cue_pred = cur_cue_bin
} else {
if(unique(cur_ds$cue_pred) != cur_cue_bin){
print('ERROR! Cue predictiveness condition does not match the data!')
}
}
# Reading the eye-tracking data:
cur_et = read.csv(paste(cur_sess_dir, 'eye_tracking.csv', sep='/'))
cur_et = cbind(data.frame(subj=cur_subj, cond=cur_cond, sess=cur_sess),
cur_et)
# For eye-tracking data, making sure that the extra columns from AB cond are present:
if(!cur_cond == 'a'){
cur_et = cbind(data.frame(shutter_sample_beg = NA, shutter_time_beg = NA,
shutter_sample_end = NA, shutter_time_end = NA,
cue_resp_sample = NA, cue_resp_time = NA),
cur_et)
# cur_et$shutter_sample_beg = NA
# cur_et$shutter_time_beg = NA
# cur_et$shutter_sample_end = NA
# cur_et$shutter_time_end = NA
# cur_et$cue_resp_sample = NA
# cur_et$cue_resp_time = NA
}
# print(colnames(cur_ds))  # debug
# ds = cur_ds  # temp
ds = rbind(ds, cur_ds)
print(colnames(et))
print(colnames(cur_et))
et = rbind(et, cur_et)
excl_file = paste(cur_sess_dir, 'exclude_trials.csv', sep='/')
if(file.exists(excl_file)){
excl_file_ds = read.csv(excl_file)
if(nrow(excl_file_ds) > 0){
cur_excl = cbind(data.frame(subj=as.numeric(substr(cur_subj, 6, 7)),
cue_pred=cur_cue_bin,
cond=substr(cur_cond, 6, 6),
sess=as.numeric(substr(cur_sess, 6, 6))), excl_file_ds)
excl = rbind(excl, cur_excl)
}
}
}
}
}
}
colnames(ds)[5] = 'trial'  # renaming the 'trial_id' column to 'trial'
head(ds)
# print(excl)
head(cur_et)
# Chunk 1: set-options
options(width=100)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
computer = 'shocky'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_U.R', sep='/'))
## Data input
ds1 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds1.csv', sep='/'))
dsa1 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa1.csv', sep='/'))
ds2 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa2 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
# Chunk 2
## Only including the predictive cueing condition from Expt 1:
ds1 = ds1[ds1$cue_pred==1,]
## Only including the trials within a certain CTOA range from Expt 2:
ds2 = ds2[ds2$ctoa <= max(ds1$ctoa),]
## Combining the two datasets:
ds = rbind(ds1, ds2)
## Sanity check
## Reordering the levels
ds$Cond <- factor(ds$Cond, c('Prompted','NoBlink','Artificial')) #this works for lm
# Chunk 3
ds1$Cond <- factor(ds1$Cond, c('Prompted','NoBlink','Artificial')) #this works for lm
summary(lmer(RT~Cond*cue_valid + (1|subj), data=ds1))
# Chunk 4
summary(lmer(RT~exp_name*Cond*cue_valid*ctoa + (1|subj), data=ds))
# Chunk 5
summary(lmer(RT~exp_name*Cond*cue_valid + (1|subj), data=ds))
# options(width=100)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_U.R', sep='/'))
## Data input
ds1 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds1.csv', sep='/'))
dsa1 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa1.csv', sep='/'))
ds2 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa2 = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
## Only including the predictive cueing condition from Expt 1:
ds1 = ds1[ds1$cue_pred==1,]
## Only including the trials within a certain CTOA range from Expt 2:
ds2 = ds2[ds2$ctoa <= max(ds1$ctoa),]
## Combining the two datasets:
ds = rbind(ds1, ds2)
## Sanity check
## Reordering the levels
ds$Cond <- factor(ds$Cond, c('Prompted','NoBlink','Artificial')) #this works for lm
head(ds)
options(width=90)
head(ds)
colnames(ds)
## A better-named experiment column:
ds$expt = 'Expt1'
ds$expt[ds$exp_name=='eb2'] = 'Expt2'
head(ds)
sumss = ddply(ds, .(subj, expt, Cond, CueValid), summarise, RT=median(RT))
p = ggplot(data=sumss, aes(x=Cond, y=rt_adv, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(expt~Cond) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3) +
theme(legend.position='none', panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(expt~Cond) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3) +
theme(legend.position='none', panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=CueValid, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(expt~Cond) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3) +
theme(legend.position='none', panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
pdf('eb_box_expts1-2.pdf', width=4.5, height=3.5)
plot(p)
dev.off()
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3) +
theme(legend.position='none', panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(legend.position='none', panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() + guides(alpha=element_blank()) +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison') +
plot(p)
pdf('eb_box_expts1-2.pdf', width=4.5, height=3.5)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() + guides(alpha=element_blank()) +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison') +
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid, alpha=0.5)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() + guides(alpha=element_blank()) +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
p = ggplot(data=sumss, aes(x=Cond, y=RT, fill=CueValid)) +
geom_boxplot() + facet_grid(.~expt) + xlab('Eye Blink Condition') +
ylab('RT (ms)') + theme_bw() +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3, ) +
theme(panel.grid.minor=element_blank(),
plot.title = element_text(hjust = 0.5)) + ggtitle('Experiments 1 & 2 Comparison')
plot(p)
pdf('eb_box_expts1-2.pdf', width=4.5, height=3.5)
plot(p)
dev.off()
dev.off()
pdf('eb_box_expts1-2.pdf', width=4.5, height=3.5)
plot(p)
dev.off()
dev.off()
pdf('eb_box_expts1-2.pdf', width=4.5, height=3.5)
plot(p)
dev.off()
pdf('eb_box_expts1-2.pdf', width=4.5, height=2.5)
plot(p)
dev.off()
pdf('eb_box_expts1-2.pdf', width=5.5, height=2.5)
plot(p)
dev.off()
# options(width=100)
options(width=90)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(reshape2)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs/BF_U.R', sep='/'))
ds = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
# options(width=100)
options(width=90)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(reshape2)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_U.R', sep='/'))
ds = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
#TODO test this code
ctoa_valid = ddply(ds[ds$CueValid=='Valid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_valid, 'RT Valid (ms)', 'RT on Valid Trials')
ctoa_invalid = ddply(ds[ds$CueValid=='Invalid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_invalid, 'RT Invalid (ms)', 'RT on Invalid Trials')
ctoa_adv = merge(ctoa_valid, ctoa_invalid, by=c('ctoa_lowbound', 'Cond', 'subj'))
ctoa_adv$RT = ctoa_adv$RT.y - ctoa_adv$RT.x  # Invalid - Valid RT
plot_box_ctoa(ctoa_adv, 'RT Invalid - Valid (ms)', 'RT Cueing Advantage)')
# options(width=100)
options(width=90)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(reshape2)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_U.R', sep='/'))
library(R.utils)
sourceDirectory(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an', sep='/'))
ds = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
#TODO test this code
ctoa_valid = ddply(ds[ds$CueValid=='Valid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_valid, 'RT Valid (ms)', 'RT on Valid Trials')
ctoa_invalid = ddply(ds[ds$CueValid=='Invalid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_invalid, 'RT Invalid (ms)', 'RT on Invalid Trials')
ctoa_adv = merge(ctoa_valid, ctoa_invalid, by=c('ctoa_lowbound', 'Cond', 'subj'))
ctoa_adv$RT = ctoa_adv$RT.y - ctoa_adv$RT.x  # Invalid - Valid RT
plot_box_ctoa(ctoa_adv, 'RT Invalid - Valid (ms)', 'RT Cueing Advantage)')
# Chunk 1: set-options
# options(width=100)
options(width=90)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(reshape2)
computer = 'acer'  # 'shocky', 'station3', 'acer' are all possible options
if(computer == 'shocky' || computer == 'toshi'){ dropbox_dir='/Users/Egor/Dropbox/' }
if(computer == 'acer'){ dropbox_dir='/Users/egora/Dropbox/' }
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_t.R', sep='/'))
source(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an/BF_U.R', sep='/'))
library(R.utils)
sourceDirectory(paste(dropbox_dir, 'Projects/eb/eb/an/funs_an', sep='/'))
ds = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
dsa = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/dsa2.csv', sep='/'))
# Chunk 2
#TODO test this code
ctoa_valid = ddply(ds[ds$CueValid=='Valid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_valid, 'RT Valid (ms)', 'RT on Valid Trials')
ctoa_invalid = ddply(ds[ds$CueValid=='Invalid',], .(ctoa_lowbound, Cond, subj), summarise,
RT=median(RT))
plot_box_ctoa(ctoa_invalid, 'RT Invalid (ms)', 'RT on Invalid Trials')
ctoa_adv = merge(ctoa_valid, ctoa_invalid, by=c('ctoa_lowbound', 'Cond', 'subj'))
ctoa_adv$RT = ctoa_adv$RT.y - ctoa_adv$RT.x  # Invalid - Valid RT
plot_box_ctoa(ctoa_adv, 'RT Invalid - Valid (ms)', 'RT Cueing Advantage)')
# Chunk 3
ctoa_valid = ddply(ds[ds$CueValid=='Valid',], .(ctoa_lowbound, Cond, subj), summarise,
RT_valid=median(RT))
p = ggplot(data=ctoa_valid, aes(x=factor(ctoa_lowbound), y=RT_valid, alpha=0.5, color=Cond)) +
geom_boxplot() +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=2, binwidth=3,
#                               aes(fill=Cond), position=position_dodge(0.73))+
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT Valid (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT on Valid Trials') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
pdf('ctoa_val_box.pdf', width=6.5, height=2.5)
plot(p)
dev.off()
p = ggplot(data=ctoa_valid, aes(x=ctoa_lowbound, y=RT_valid, alpha=0.5, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
scale_x_continuous(breaks = as.integer(ctoa_lowbound)) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT Valid (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT on Valid Trials') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
pdf('ctoa_val_smooth.pdf', width=6.5, height=2.5)
plot(p)
dev.off()
head(ctoa_valid)
p = ggplot(data=ctoa_valid, aes(x=ctoa_lowbound, y=RT_valid, alpha=0.5, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
scale_x_continuous(breaks = as.integer(ctoa_lowbound)) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT Valid (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT on Valid Trials') + guides(alpha=F)
p = ggplot(data=ctoa_valid, aes(x=ctoa_lowbound, y=RT_valid, alpha=0.5, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
scale_x_continuous(breaks = as.integer(unique(ds$ctoa_lowbound))) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT Valid (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT on Valid Trials') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
head(ds)
head(dsa)
bdur_rt = ddply(dsa[dsa$Cond=='Prompted',], .(subj, CuePredFull, CueValid), summarise,
RT=mean(RT), bdur=mean(tot_blank_time), bdur_min=min(tot_blank_time),
bdur_max=max(tot_blank_time), bdur_sd=sd(tot_blank_time),
bdur_supra300=length(tot_blank_time>300))
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(cue_valid_full))) +
stat_smooth(method='lm', aes(color=factor(cue_valid_full)), alpha=.2) +
facet_grid(cols=vars(cue_pred_full)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title=cue_valid_name)) + theme_bw() + xlim(75, 225) +
theme(legend.position=c(.09, .75), legend.title=element_blank())
head(dsa)
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(cue_valid_full))) +
stat_smooth(method='lm', aes(color=factor(cue_valid_full)), alpha=.2) +
facet_grid(cols=vars(cue_pred_full)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title='Cue')) + theme_bw() + xlim(75, 225) +
theme(legend.position=c(.09, .75), legend.title=element_blank())
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(cue_valid_full))) +
stat_smooth(method='lm', aes(color=factor(cue_valid_full)), alpha=.2) +
facet_grid(cols=vars(CuePredFull)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title='Cue')) + theme_bw() + xlim(75, 225) +
theme(legend.position=c(.09, .75), legend.title=element_blank())
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(cue_valid_full))) +
stat_smooth(method='lm', aes(color=factor(CueValid)), alpha=.2) +
facet_grid(cols=vars(CuePredFull)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title='Cue')) + theme_bw() + xlim(75, 225) +
theme(legend.position=c(.09, .75), legend.title=element_blank())
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(CueValid))) +
stat_smooth(method='lm', aes(color=factor(CueValid)), alpha=.2) +
facet_grid(cols=vars(CuePredFull)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title='Cue')) + theme_bw() + xlim(75, 225) +
theme(legend.position=c(.09, .75), legend.title=element_blank())
ggplot(bdur_rt, aes(x=bdur, y=RT)) + geom_point(aes(color=factor(CueValid))) +
stat_smooth(method='lm', aes(color=factor(CueValid)), alpha=.2) +
facet_grid(cols=vars(CuePredFull)) + xlab('Blink Duration (ms)') + ylab('Reaction Time (ms)')+
guides(colour=guide_legend(title='Cue')) + theme_bw() +
theme(legend.position=c(.09, .75), legend.title=element_blank())
subj_ss = ds[ds$subj==1,]
head(subj_ss)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
# Reordering levels of Condition variable, such that No Blink condition is the reference:
ds$Cond <- factor(ds$Cond, c('Prompted','NoBlink','Artificial')) # this works for lm
subj_ss = ds[ds$subj==1,]
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
# Reordering levels of Condition variable, such that No Blink condition is the reference:
ds$Cond <- factor(ds$Cond, c('NoBlink','Artificial','Prompted')) # this works for lm
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
plot(p)
ds = read.csv(paste(dropbox_dir, 'Projects/eb/eb/an/consolidated/ds2.csv', sep='/'))
# Reordering levels of Condition variable, such that No Blink condition is the reference:
ds$Cond <- factor(ds$Cond, c('NoBlink','Artificial','Prompted')) # this works for lm
subj_ss = ds[ds$subj==1,]
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle('RT') + guides(alpha=F)
p = plot_themefy(p)
plot(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.1) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', cur_subj, 'RT')) + guides(alpha=F)
p = plot_themefy(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.2) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', cur_subj, 'RT')) + guides(alpha=F)
p = plot_themefy(p)
plot(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', cur_subj, 'RT')) + guides(alpha=F)
p = plot_themefy(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.2) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', cur_subj, 'RT')) + guides(alpha=F)
p = plot_themefy(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.2) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', '1', 'RT')) + guides(alpha=F)
p = plot_themefy(p)
plot(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.3) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', '1', 'RT')) + guides(alpha=F)
p = plot_themefy(p)
plot(p)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.1) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + #ylim(250,650) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', '1', 'RT')) + guides(alpha=F)
p = plot_themefy(p)
plot(p)
head(subj_ss)
p = ggplot(data=subj_ss, aes(x=ctoa, y=RT, color=Cond)) +
geom_smooth(method='loess', alpha=0.1, aes(fill=Cond), span=0.1) +
xlab('Cue-to-Target Asynchrony (ms)') + ylab('RT (ms)') + facet_grid(CueValid~.) +
theme(panel.grid.minor=element_blank(), plot.title = element_text(hjust = 0.5)) +
ggtitle(paste('Participant', '1', 'RT')) + guides(alpha=F)
p = plot_themefy(p)
plot(p)
str(ds$subj)
unique(ds$subj)
