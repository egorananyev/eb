# Chunk 1: set-options
options(width=100)
dropbox_dir = '/Users/Egor/Dropbox/' # Mac / Toshi
data_dir = paste0(dropbox_dir, 'Projects/eb/data')
all_data_dirs = list.dirs(data_dir)[-1]  # excluding the first (base) directory
# TEMP: for now, just taking the last directory:
this_data_dir = all_data_dirs[length(all_data_dirs)]
file_name = dir(paste0(this_data_dir), pattern='.asc')
file_path = paste(this_data_dir, file_name, sep='/')
# Chunk 2
# Read in the data:
raw_data = readLines(file_path)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in){
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t', fixed=T))
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
# Note that this throws out all character values.
}
# Chunk 3
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples)
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
# Chunk 4
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
df_starts = data.frame(do.call(rbind, strsplit(trial_start, "\t", fixed=TRUE)))
df_ends = data.frame(do.call(rbind, strsplit(trial_end, "\t", fixed=TRUE)))
df_trials = data.frame(trial_start=df_starts[,2], trial_end=df_ends[,2])
print(df_trials)
# Chunk 5
# extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
df_blinks = data.frame(do.call(rbind, strsplit(blinks, "\t", fixed=TRUE)))
df_blinks = cbind(df_blinks,
data.frame(do.call(rbind, strsplit(as.character(df_blinks[,1]), " ",
fixed=TRUE))))
df_blinks = df_blinks[,c(5,6,2,3)]
colnames(df_blinks) = c('eye', 'start', 'end', 'dur')
print(head(df_blinks))
# TODO: the blink durations tend to be overestimated by 2 units
# Chunk 6
library(ggplot2)
# For simplicity, only visualizing the right eye at the moment:
plot_samples = function(ds, trials){
ss = ds[as.numeric(ds$time) >= as.numeric(trials$trial_start[1]) &
as.numeric(ds$time) <= as.numeric(trials$trial_end[1]),]
print(ggplot())
}
p = ggplot(df_samples, aes(x=time, y=yr)) + geom_line()
dropbox_dir = '/Users/egora/Dropbox/' # Mac / Toshi
data_dir = paste0(dropbox_dir, 'Projects/eb/data')
all_data_dirs = list.dirs(data_dir)[-1]  # excluding the first (base) directory
# TEMP: for now, just taking the last directory:
this_data_dir = all_data_dirs[length(all_data_dirs)]
file_name = dir(paste0(this_data_dir), pattern='.asc')
file_path = paste(this_data_dir, file_name, sep='/')
# Read in the data:
raw_data = readLines(file_path)
# Chunk 1: set-options
options(width=100)
dropbox_dir = '/Users/Egor/Dropbox/' # Mac / Toshi
dropbox_dir = '/Users/egora/Dropbox/' # Mac / Toshi
data_dir = paste0(dropbox_dir, 'Projects/eb/data')
all_data_dirs = list.dirs(data_dir)[-1]  # excluding the first (base) directory
# TEMP: for now, just taking the last directory:
this_data_dir = all_data_dirs[length(all_data_dirs)]
file_name = dir(paste0(this_data_dir), pattern='.asc')
file_path = paste(this_data_dir, file_name, sep='/')
# Chunk 2
# Read in the data:
raw_data = readLines(file_path)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in){
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t', fixed=T))
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
# Note that this throws out all character values.
}
# Chunk 3
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples)
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
# Chunk 4
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
df_starts = data.frame(do.call(rbind, strsplit(trial_start, "\t", fixed=TRUE)))
df_ends = data.frame(do.call(rbind, strsplit(trial_end, "\t", fixed=TRUE)))
df_trials = data.frame(trial_start=df_starts[,2], trial_end=df_ends[,2])
print(df_trials)
# Chunk 5
# extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
df_blinks = data.frame(do.call(rbind, strsplit(blinks, "\t", fixed=TRUE)))
df_blinks = cbind(df_blinks,
data.frame(do.call(rbind, strsplit(as.character(df_blinks[,1]), " ",
fixed=TRUE))))
df_blinks = df_blinks[,c(5,6,2,3)]
colnames(df_blinks) = c('eye', 'start', 'end', 'dur')
print(head(df_blinks))
# TODO: the blink durations tend to be overestimated by 2 units
# Chunk 6
library(ggplot2)
# For simplicity, only visualizing the right eye at the moment:
plot_samples = function(ds, trials){
ss = ds[as.numeric(ds$time) >= as.numeric(trials$trial_start[1]) &
as.numeric(ds$time) <= as.numeric(trials$trial_end[1]),]
print(ggplot())
}
p = ggplot(df_samples, aes(x=time, y=yr)) + geom_line()
head(dfy)
head(samples)
df_in = samples
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t', fixed=T))
head(df_out)
str(df_out)
dim(df_out)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in){
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t', fixed=T))
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out[,1:7], 2, as.numeric))
# Note that this throws out all character values.
}
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples)
df_in = samples
head(df_in)
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t', fixed=T))
head(df_out)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in){
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out[,1:7], 2, as.numeric))
# Note that this throws out all character values.
}
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples)
df_in = samples
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))
df_out
head(df_out)
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,1:7]
head(df_out)
sum(df_out=='   .')
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
head(df_out)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in){
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,1:7]
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
# Note that this throws out all character values.
}
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples)
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
df_starts = data.frame(do.call(rbind, strsplit(trial_start, "\t", fixed=TRUE)))
df_ends = data.frame(do.call(rbind, strsplit(trial_end, "\t", fixed=TRUE)))
df_trials = data.frame(trial_start=df_starts[,2], trial_end=df_ends[,2])
print(df_trials)
range(nrow(df_trials))
# Labeling trials in the 'samples' data frame
for(cur_trial in 1:nrow(df_trials)){
print(cur_trial)
}
str(DS)
str(ds)
str(df_samples)
str(trials)
str(df_trials)
df_strats
df_starts
df_starts = dfy(trial_start)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in, max_col){
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,1:max_col]
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
# Note that this throws out all character values.
}
# creating a proper data frame:
df_samples = dfy(samples, 7)  # we only need 7 cols
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
head(trial_start)
df_starts = dfy(trial_start, 2)
df_starts
1:7
2:2
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in, cols){
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
# Note that this throws out all character values.
}
# creating a proper data frame:
df_samples = dfy(samples, 1:7)  # we only need 7 cols
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
df_starts = dfy(trial_start, 2)
head(trial_start)
df_in = trial_start
cols = 2
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
head(df_out)
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
head(df_out)
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
head(df_out)
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 1, as.numeric))
# We then convert the resulting character matrix into a numeric data frame:
df_out = data.frame(apply(df_out, 2, as.numeric))
df_out
dim(df_out)
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
dim(df_out)
dim(df_in)
df_in
is.na(dim(df_in))
is.null(dim(df_in))
data.frame(apply(df_out, 2, as.numeric))
data.frame(apply(df_out, as.numeric))
data.frame(apply(df_out, fun=as.numeric))
data.frame(apply(df_out, FUN = =as.numeric))
data.frame(apply(df_out, FUN = as.numeric))
?apply
data.frame(lapply(df_out, as.numeric))
data.frame(sapply(df_out, as.numeric))
df_out
as.numeric(df_out)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in, cols){
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
# We then convert the resulting character matrix into a numeric data frame:
if(is.null(dim(df_out))){  # if there is only a single dimension (i.e., a list), no need for 'apply'
df_out = as.numeric(df_out)
}else{  # otherwise, 'apply'ing 'as.numeric' conversion to columns:
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
df_out = data.frame(apply(df_out, 2, as.numeric))
}
}
# extracting lines that start with numbers:
samples = raw_data[grepl('^[0-9]', raw_data)]
# creating a proper data frame:
df_samples = dfy(samples, 1:7)  # we only need 7 cols
colnames(df_samples) = c('time', 'xl', 'yl', 'psl', 'xr', 'yr', 'psr')
print(head(df_samples))
trial_start = raw_data[grepl('^START', raw_data)]
trial_end = raw_data[grepl('^END', raw_data)]
df_starts = dfy(trial_start, 2)
df_starts
df_trials = data.frame(trial_start=dfy(raw_data[grepl('^START', raw_data)], 2),
trial_end=dfy(raw_data[grepl('^END', raw_data)], 2))
df_trials
df_trials = data.frame(start=dfy(raw_data[grepl('^START', raw_data)], 2),
end=dfy(raw_data[grepl('^END', raw_data)], 2))
print(df_trials)
# Labeling trials in the 'samples' data frame
for(cur_trial in 1:nrow(df_trials)){
df_samples$trial[df_samples$time >= df_trials$start[cur_trial]] = cur_trial
}
head_df_samples
head(df_samples)
unique(df_samples$trial)
# Extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
head(blinks)
df_blinks = dfy(blinks, 1:5)
df_in = blinks
cols = 1:5
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
do.call(rbind, strsplit(df_in, '\t'))
df_blinks = dfy(blinks, 1:3)
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
cols = 1:3
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, '\t'))[,cols]
head(df_out)
# This function converts a specific chunk of raw data into a numeric data frame.
dfy = function(df_in, cols, sep_){
## The 'max_col' parameter identifies the number of columns to capture
# First, we split the dataset by the tab '\t' delimeter:
df_out = do.call(rbind, strsplit(df_in, sep_))[,cols]
# We then convert the resulting character matrix into a numeric data frame:
if(is.null(dim(df_out))){  # if there is only a single dimension (i.e., a list), no need for 'apply'
df_out = as.numeric(df_out)
}else{  # otherwise, 'apply'ing 'as.numeric' conversion to columns:
# To avoid the 'conversion to NA' warning, preassigning blink-related blank cells to NAs:
df_out[df_out=='   .'] = NA
df_out = data.frame(apply(df_out, 2, as.numeric))
}
}
df_blinks = dfy(blinks, 1:3, '\t')
df_blinks
# Extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
# df_blinks = dfy(blinks, 1:3, '\t')
df_blinks = data.frame(do.call(rbind, strsplit(blinks, "\t", fixed=TRUE)))
df_blinks = cbind(df_blinks,
data.frame(do.call(rbind, strsplit(as.character(df_blinks[,1]), " ",
fixed=TRUE))))
df_blinks = df_blinks[,c(5,6,2,3)]
colnames(df_blinks) = c('eye', 'start', 'end', 'dur')
print(head(df_blinks))
# Extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
df_blinks = cbind(df_blinks,
data.frame(do.call(rbind, strsplit(as.character(df_blinks[,1]), " ",
fixed=TRUE))))
df_blinks = data.frame(do.call(rbind, strsplit(blinks, "\t", fixed=TRUE)))
df_blinks = df_blinks[,c(5,6,2,3)]
colnames(df_blinks) = c('eye', 'start', 'end', 'dur')
# Extracting the lines with blink ends, as they include blink start, end, and duration:
blinks = raw_data[grepl('^EBLINK', raw_data)]
df_blinks = data.frame(do.call(rbind, strsplit(blinks, "\t", fixed=TRUE)))
df_blinks = cbind(df_blinks,
data.frame(do.call(rbind, strsplit(as.character(df_blinks[,1]), " ",
fixed=TRUE))))
df_blinks = df_blinks[,c(5,6,2,3)]
colnames(df_blinks) = c('eye', 'start', 'end', 'dur')
print(head(df_blinks))
# For simplicity, only visualizing the right eye at the moment:
ggplot(df_samples[,df_samples$trial==1], aes(x=time, y=yr)) + geom_line()
# For simplicity, only visualizing the right eye at the moment:
ggplot(df_samples[df_samples$trial==1,], aes(x=time, y=yr)) + geom_line()
# For simplicity, only visualizing the right eye at the moment:
ggplot(df_samples[df_samples$trial==4,], aes(x=time, y=yr)) + geom_line()
# For simplicity, only visualizing the right eye at the moment:
ggplot(df_samples[df_samples$trial==3,], aes(x=time, y=yr)) + geom_line()
# For simplicity, only visualizing the right eye at the moment:
ggplot(df_samples[df_samples$trial==4,], aes(x=time, y=yr)) + geom_line()
head(df_blinks)
p = ggplot(df_samples[,df_samples$trial==cur_trial], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end,
ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
head(df_blinks)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end,
ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
cur_trial=
4
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end,
ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
print(p)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end,
ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
print(p)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) #+ geom_rect(data=df_blinks, inherit.aes=F,
# aes(xmin=start, xmax=end, ymin=350, ymax=600),
# color='transparent', fill='red', alpha=.5)
print(p)
head(df_blinks)
str(df_blinks)
df_blinks[,2:4] = data.frame(apply(df_blinks[,2:4], 2, as.numeric))
head(df_blinks)
str(df_blinks)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end, ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
print(p)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end, ymin=350, ymax=600),
color='transparent', fill='red', alpha=.5)
print(p)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end, ymin=350, ymax=600),
color='transparent', fill='red', alpha=.4)
print(p)
p = ggplot(df_samples[df_samples$trial==cur_trial,], aes(x=time, y=yr)) +
geom_line() + ylim(350, 600) + geom_rect(data=df_blinks, inherit.aes=F,
aes(xmin=start, xmax=end, ymin=350, ymax=600),
color='transparent', fill='red', alpha=.3)
print(p)
