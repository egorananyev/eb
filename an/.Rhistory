trial_samples = samples[samples$sample>=trials$trial_sample_beg[cur_trial] &
samples$sample< trials$trial_sample_end[cur_trial],]
head(trial_samples)
nrow(trial_samples)
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
?merge
all_samples = data.frame()
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_samples = samples[samples$sample>=this_trial_sample_beg &
samples$sample< this_trial_sample_end,]
trial_samples$trial = cur_trial
trial_samples$time = (trial_samples$sample - this_trial_sample_beg) * 0.001
all_samples = rbind(all_samples, trial_samples)
head(trial_samples)
head(all_samples)
head(samples)
# Labeling trials in the 'samples' data frame
lab_samples = function(samples, trials){
all_samples = data.frame()
for(cur_trial in 1:nrow(trials)){
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_samples = samples[samples$sample>=this_trial_sample_beg &
samples$sample< this_trial_sample_end,]
trial_samples$trial = cur_trial
trial_samples$time = (trial_samples$sample - this_trial_sample_beg) * 0.001
all_samples = rbind(all_samples, trial_samples)
}
samples = all_samples
print(head(samples))
return(samples)
}
samples = lab_samples(samples, trials)
nrow(samples)
source(paste(dropbox_dir, 'Projects/eb/eb/an/eb_read_et.R', sep='/'))
# Labeling trials in the 'samples' data frame
samples = lab_samples(samples, trials)
# Extracting the lines with blank ends, as they include blank start, end, and duration:
blanks = dfy(raw_data[grepl('^EBLINK', raw_data)], c(6,2,3), 1)
colnames(blanks) = c('blank_sample_beg', 'blank_sample_end', 'tot_blink_samples')
head(blanks)
cur_trial
# Extracting the lines with blank ends, as they include blank start, end, and duration:
blanks = dfy(raw_data[grepl('^EBLINK', raw_data)], c(6,2,3), 1)
colnames(blanks) = c('blank_sample_beg', 'blank_sample_end', 'tot_blink_samples')
all_blanks = data.frame()
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) * 0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) * 0.001
head(trial_blanks)
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end,]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) * 0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) * 0.001
blanks$trial[blanks$blank_sample_beg>=trials$trial_sample_beg[cur_trial]] = cur_trial
# blanks$blank_time_beg[blanks$trial==cur_trial] =
#     (blanks$blank_sample_beg[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
# blanks$blank_time_end[blanks$trial==cur_trial] =
#     (blanks$blank_sample_end[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
all_blanks = rbind(all_blanks, trial_blanks)
head(all_blanks)
# Labeling trials in the 'blanks' data frame
for(cur_trial in 1:nrow(trials)){
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end,]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) * 0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) * 0.001
blanks$trial[blanks$blank_sample_beg>=trials$trial_sample_beg[cur_trial]] = cur_trial
# blanks$blank_time_beg[blanks$trial==cur_trial] =
#     (blanks$blank_sample_beg[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
# blanks$blank_time_end[blanks$trial==cur_trial] =
#     (blanks$blank_sample_end[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
all_blanks = rbind(all_blanks, trial_blanks)
}
print(head(blanks))
# Extracting the lines with blank ends, as they include blank start, end, and duration:
blanks = dfy(raw_data[grepl('^EBLINK', raw_data)], c(6,2,3), 1)
colnames(blanks) = c('blank_sample_beg', 'blank_sample_end', 'tot_blink_samples')
all_blanks = data.frame()
# Labeling trials in the 'blanks' data frame
for(cur_trial in 1:nrow(trials)){
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end,]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) * 0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) * 0.001
blanks$trial[blanks$blank_sample_beg>=trials$trial_sample_beg[cur_trial]] = cur_trial
# blanks$blank_time_beg[blanks$trial==cur_trial] =
#     (blanks$blank_sample_beg[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
# blanks$blank_time_end[blanks$trial==cur_trial] =
#     (blanks$blank_sample_end[blanks$trial==cur_trial] -
#        trials$trial_sample_beg[cur_trial]) * 0.001
all_blanks = rbind(all_blanks, trial_blanks)
}
print(head(blanks))
head(all_blanks)
read_blanks = function(raw_data, trials){
# Extracting the lines with blank ends, as they include blank start, end, and duration:
blanks = dfy(raw_data[grepl('^EBLINK', raw_data)], c(6,2,3), 1)
colnames(blanks) = c('blank_sample_beg', 'blank_sample_end', 'tot_blink_samples')
all_blanks = data.frame()
# Labeling trials in the 'blanks' data frame
for(cur_trial in 1:nrow(trials)){
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end,]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) *
0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) *
0.001
blanks$trial[blanks$blank_sample_beg>=trials$trial_sample_beg[cur_trial]] = cur_trial
all_blanks = rbind(all_blanks, trial_blanks)
}
print(head(all_blanks))
return(all_blanks)
}
blanks = read_blanks(raw_data, trials)
blanks = read_blanks()
blanks = read_blanks(raw_data, trials)
# Visualize the data:
plot_qc = function(samples, trials, xlims){
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
# Visualize the data:
library(ggplot2)
xlims = c(0, 3)
cur_trial
cur_trial = 1
plot_qc(samples, trials, xlims)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc(samples, trials, xlims)
library(R.utils)
if(shocky){dropbox_dir='/Users/egora/Dropbox/'} else{dropbox_dir='/Users/Egor/Dropbox/'}
library(R.utils)
sourceDirectory(paste(dropbox_dir, 'Projects/eb/eb/an/funs', sep='/'))
trials
trials$cue_time - trials$trial_time_beg
blanks
# Read blank events (may be more than one per trial)
read_blanks = function(raw_data, trials){
# Extracting the lines with blank ends, as they include blank start, end, and duration:
blanks = dfy(raw_data[grepl('^EBLINK', raw_data)], c(6,2,3), 1)
colnames(blanks) = c('blank_sample_beg', 'blank_sample_end', 'tot_blank_samples')
all_blanks = data.frame()
# Labeling trials in the 'blanks' data frame
for(cur_trial in 1:nrow(trials)){
this_trial_sample_beg = trials$trial_sample_beg[cur_trial]
this_trial_sample_end = trials$trial_sample_end[cur_trial]
trial_blanks = blanks[blanks$blank_sample_beg>=this_trial_sample_beg &
blanks$blank_sample_beg< this_trial_sample_end,]  # ... note that this
# ... implies that the blank must have been initiated on this trial
trial_blanks$trial = cur_trial
trial_blanks$blank_time_beg = (trial_blanks$blank_sample_beg - this_trial_sample_beg) *
0.001
trial_blanks$blank_time_end = (trial_blanks$blank_sample_end - this_trial_sample_beg) *
0.001
blanks$trial[blanks$blank_sample_beg>=trials$trial_sample_beg[cur_trial]] = cur_trial
all_blanks = rbind(all_blanks, trial_blanks)
}
all_blanks$tot_blank_time = all_blanks$blank_time_end - all_blanks$blank_time_beg
print(head(all_blanks))
return(all_blanks)
}
?trial
head(trials)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
p = p + geom_vline(data=trials[cur_trail,], inherit.aes=F,
aes(xintercept=resp_time))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc(samples, trials, xlims)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
p = p + geom_vline(data=trials[cur_trial,], inherit.aes=F,
aes(xintercept=resp_time))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc(samples, trials, xlims)
xlims = c(0, 2.2)
plot_qc(samples, trials, xlims)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=resp_time-trial_time_beg))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc(samples, trials, xlims)
head(trials)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
# Indicating the start of key monitoring & trial end times:
p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=resp_time-trial_time_beg))
p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=trial_time_end-trial_time_beg))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc(samples, trials, xlims)
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
# Indicating the start of key monitoring & trial end times:
p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=resp_time-trial_time_beg))
# p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=trial_time_end-trial_time_beg))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
plot_qc = function(samples, trials, xlims){
ylims = c(0, 1000)
p = ggplot(samples[samples$trial==cur_trial,], aes(x=time))
p = p + geom_line(aes(y=yr, colour='Gaze'))
p = p + geom_line(aes(y=psr/5, colour='Pupil'))
p = p + scale_y_continuous(sec.axis = sec_axis(~.*5, name='Pupil Diameter (a.u.)'),
limits=ylims)
p = p + xlim(xlims)
p = p + scale_colour_manual(values=c('blue', 'red'))
p = p + theme(legend.position = c(0.15, 0.2))
# number of blanks in this trial:
numof_blanks = sum(blanks$trial==cur_trial)
if(numof_blanks >= 1){
cur_blanks = blanks[blanks$trial==cur_trial,]
for(cur_blank in 1:numof_blanks){
p = p + geom_rect(data=cur_blanks[cur_blank,], inherit.aes=F,
aes(xmin=blank_time_beg, xmax=blank_time_end,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='purple', alpha=.3)
}
}
# Marking the cue:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=cue_time-trial_time_beg, xmax=cue_time+.2-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='orange', alpha=.3)
# Marking the supposed blink time window:
p = p + geom_rect(data=trials[cur_trial,], inherit.aes=F,
aes(xmin=blink_window_time-trial_time_beg-.26,
xmax=blink_window_time+.3-trial_time_beg,
ymin=ylims[1], ymax=ylims[2]),
color='transparent', fill='green', alpha=.3)
# Indicating the start of key monitoring & trial end times (optional/for debug):
# p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=resp_time-trial_time_beg))
# p = p + geom_vline(data=trials[cur_trial,], aes(xintercept=trial_time_end-trial_time_beg))
p = p + labs(y='Gaze Y-Position', x='Time', colour='Parameter')
p = p + ggtitle(paste('Trial #', as.character(cur_trial))) + theme_bw()
print(p)
}
# Getting the data directory
get_dir = function(subj_, cond_, dropbox_dir){
data_dir = paste0(dropbox_dir, 'Projects/eb/data/eb1')
cond_dir = paste(data_dir, subj_, cond_, sep='/')
all_data_dirs = list.dirs(cond_dir)[-1]  # excluding the first (base) directory
# TEMP: for now, just taking the last directory:
this_data_dir = all_data_dirs[length(all_data_dirs)]
return(this_data_dir)
}
shocky = T
if(shocky){dropbox_dir='/Users/egora/Dropbox/'} else{dropbox_dir='/Users/Egor/Dropbox/'}
library(R.utils)
sourceDirectory(paste(dropbox_dir, 'Projects/eb/eb/an/funs', sep='/'))
# Getting the data directory:
this_data_dir = get_dir(subj, cond, dropbox_dir)
this_data_dir
raw_data = read_em(this_data_dir)
